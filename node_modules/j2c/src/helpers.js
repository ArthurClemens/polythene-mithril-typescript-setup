var
  emptyArray = [],
  emptyObject = {},
  type = emptyObject.toString,
  ARRAY =  type.call(emptyArray),
  OBJECT = type.call(emptyObject),
  STRING = type.call(''),
  FUNCTION = type.call(type),
  own =  emptyObject.hasOwnProperty,
  freeze = Object.freeze || function(o) {return o}


function defaults(target, source) {
  for (var k in source) if (own.call(source, k)) {
    if (k.indexOf('$') && !(k in target)) target[k] = source[k]
  }
  return target
}

function cartesian(a,b) {
  var res = [], i, j
  for (j in b) if(own.call(b, j))
    for (i in a) if(own.call(a, i))
      res.push(a[i] + b[j])
  return res
}

// "Tokenizes" the selectors into parts relevant for the next function.
// Strings and comments are matched, but ignored afterwards.
// This is not a full tokenizers. It only recognizes comas, parentheses,
// strings and comments.
// regexp generated by scripts/regexps.js then trimmed by hand
var selectorTokenizer = /[(),]|"(?:\\.|[^"\n])*"|'(?:\\.|[^'\n])*'|\/\*[\s\S]*?\*\//g


/**
 * This will split a coma-separated selector list into individual selectors,
 * ignoring comas in strings, comments and in :pseudo-selectors(parameter, lists).
 *
 * @param {string} selector
 * @return {string[]}
 */

function splitSelector(selector) {
  var indices = [], res = [], inParen = 0, o
  /*eslint-disable no-cond-assign*/
  while (o = selectorTokenizer.exec(selector)) {
  /*eslint-enable no-cond-assign*/
    switch (o[0]) {
    case '(': inParen++; break
    case ')': inParen--; break
    case ',': if (inParen) break; indices.push(o.index)
    }
  }
  for (o = indices.length; o--;){
    res.unshift(selector.slice(indices[o] + 1))
    selector = selector.slice(0, indices[o])
  }
  res.unshift(selector)
  return res
}

// Like the `selectorTokenizer`, but for the `&` operator
var ampersandTokenizer = /&|"(?:\\.|[^"\n])*"|'(?:\\.|[^'\n])*'|\/\*[\s\S]*?\*\//g

function ampersand (selector, parents) {
  var indices = [], split = [], res, o
  /*eslint-disable no-cond-assign*/
  while (o = ampersandTokenizer.exec(selector)) {
  /*eslint-enable no-cond-assign*/
    if (o[0] == '&') indices.push(o.index)
  }
  for (o = indices.length; o--;){
    split.unshift(selector.slice(indices[o] + 1))
    selector = selector.slice(0, indices[o])
  }
  split.unshift(selector)
  if (split.length === 1) split.unshift('')
  res = [split[0]]
  for (o = 1; o < split.length; o++) {
    res = cartesian(res, cartesian(parents, [split[o]]))
  }
  return res.join(',')
}

function flatIter (f) {
  return function iter(arg) {
    if (type.call(arg) === ARRAY) for (var i= 0 ; i < arg.length; i ++) iter(arg[i])
    else f(arg)
  }
}

export {
  ARRAY, FUNCTION, OBJECT, STRING,
  ampersand, cartesian, defaults,
  emptyArray, emptyObject,
  flatIter, freeze, own,
  splitSelector, type
}